Liquibase
The line apply plugin: 'org.liquibase.gradle' is used in a Gradle build script to apply the Liquibase Gradle Plugin to your project. Liquibase is an open-source database schema change management tool that helps you manage and version your database changes in a controlled and consistent way, especially useful in collaborative and continuous integration environments.

The org.liquibase.gradle plugin allows you to run Liquibase commands directly from the Gradle build process, making it easier to manage database migrations as part of your application's build lifecycle.

What is Liquibase?
Liquibase works by tracking database schema changes through changelog files, typically in XML, YAML, JSON, or SQL format. 
These changelogs contain changesets that describe the database changes, such as adding tables, columns, or altering indexes.
Liquibase can automatically apply these changes to the database and track which changes have been applied, ensuring that migrations are only applied once.


liquibase {
    activities {
        main {
            // Specify the database connection details
            url = 'jdbc:postgresql://localhost:5432/mydatabase'
            driver = 'org.postgresql.Driver'
            username = 'myuser'
            password = 'mypassword'
            changeLogFile = 'src/main/resources/db/changelog/db.changelog-master.xml'  // Path to the changelog file
        }
    }
}


Liquibase Changelog Example (XML Format)
The changelog file (db.changelog-master.xml) should be placed in src/main/resources/db/changelog/ and can look like this:


<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
                        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd">

    <!-- Example changeset to create a table -->
    <changeSet id="1" author="developer">
        <createTable tableName="person">
            <column name="id" type="int">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="name" type="varchar(255)"/>
            <column name="age" type="int"/>
        </createTable>
    </changeSet>

    <!-- Example changeset to add a column -->
    <changeSet id="2" author="developer">
        <addColumn tableName="person">
            <column name="email" type="varchar(255)"/>
        </addColumn>
    </changeSet>

</databaseChangeLog>


---
Benefits of Using Liquibase with Gradle:
Versioned Database Changes: Track and manage database schema changes over time. Liquibase makes it easy to apply, rollback, and manage changes.
Integration with Gradle: Liquibase commands can be executed directly within the Gradle build lifecycle, which can be particularly useful in CI/CD pipelines.
Database Agnostic: Liquibase can work with various relational databases, including PostgreSQL, MySQL, Oracle, SQL Server, and others.
Consistency: Liquibase ensures that the schema changes are applied consistently across different environments (development, testing, production).
